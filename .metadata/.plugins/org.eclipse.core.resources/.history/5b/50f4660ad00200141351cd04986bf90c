package org.newdawn.slick.command;

import java.util.*;
import org.newdawn.slick.Input;
import org.newdawn.slick.util.InputAdapter;

// Referenced classes of package org.newdawn.slick.command:
//            Command, Control, InputProviderListener, KeyControl, 
//            MouseButtonControl, ControllerDirectionControl, ControllerButtonControl

public class InputProvider
{
    private class InputListenerImpl extends InputAdapter
    {

        final InputProvider this$0;

        public boolean isAcceptingInput()
        {
            return true;
        }

        public void keyPressed(int key, char c)
        {
            Command command = (Command)commands.get(new KeyControl(key));
            if(command != null)
            {
                firePressed(command);
            }
        }

        public void keyReleased(int key, char c)
        {
            Command command = (Command)commands.get(new KeyControl(key));
            if(command != null)
            {
                fireReleased(command);
            }
        }

        public void mousePressed(int button, int x, int y)
        {
            Command command = (Command)commands.get(new MouseButtonControl(button));
            if(command != null)
            {
                firePressed(command);
            }
        }

        public void mouseReleased(int button, int x, int y)
        {
            Command command = (Command)commands.get(new MouseButtonControl(button));
            if(command != null)
            {
                fireReleased(command);
            }
        }

        public void controllerLeftPressed(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.LEFT));
            if(command != null)
            {
                firePressed(command);
            }
        }

        public void controllerLeftReleased(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.LEFT));
            if(command != null)
            {
                fireReleased(command);
            }
        }

        public void controllerRightPressed(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.RIGHT));
            if(command != null)
            {
                firePressed(command);
            }
        }

        public void controllerRightReleased(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.RIGHT));
            if(command != null)
            {
                fireReleased(command);
            }
        }

        public void controllerUpPressed(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.UP));
            if(command != null)
            {
                firePressed(command);
            }
        }

        public void controllerUpReleased(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.UP));
            if(command != null)
            {
                fireReleased(command);
            }
        }

        public void controllerDownPressed(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.DOWN));
            if(command != null)
            {
                firePressed(command);
            }
        }

        public void controllerDownReleased(int controller)
        {
            Command command = (Command)commands.get(new ControllerDirectionControl(controller, ControllerDirectionControl.DOWN));
            if(command != null)
            {
                fireReleased(command);
            }
        }

        public void controllerButtonPressed(int controller, int button)
        {
            Command command = (Command)commands.get(new ControllerButtonControl(controller, button));
            if(command != null)
            {
                firePressed(command);
            }
        }

        public void controllerButtonReleased(int controller, int button)
        {
            Command command = (Command)commands.get(new ControllerButtonControl(controller, button));
            if(command != null)
            {
                fireReleased(command);
            }
        }

        private InputListenerImpl()
        {
            this$0 = InputProvider.this;
            super();
        }

    }

    private class CommandState
    {

        private boolean down;
        private boolean pressed;
        final InputProvider this$0;

        public boolean isPressed()
        {
            if(pressed)
            {
                pressed = false;
                return true;
            } else
            {
                return false;
            }
        }

        public boolean isDown()
        {
            return down;
        }



        private CommandState()
        {
            this$0 = InputProvider.this;
            super();
        }

    }


    private HashMap commands;
    private ArrayList listeners;
    private Input input;
    private HashMap commandState;
    private boolean active;

    public InputProvider(Input input)
    {
        listeners = new ArrayList();
        commandState = new HashMap();
        active = true;
        this.input = input;
        input.addListener(new InputListenerImpl());
        commands = new HashMap();
    }

    public List getUniqueCommands()
    {
        List uniqueCommands = new ArrayList();
        Iterator it = commands.values().iterator();
        do
        {
            if(!it.hasNext())
            {
                break;
            }
            Command command = (Command)it.next();
            if(!uniqueCommands.contains(command))
            {
                uniqueCommands.add(command);
            }
        } while(true);
        return uniqueCommands;
    }

    public List getControlsFor(Command command)
    {
        List controlsForCommand = new ArrayList();
        Iterator it = commands.entrySet().iterator();
        do
        {
            if(!it.hasNext())
            {
                break;
            }
            java.util.Map.Entry entry = (java.util.Map.Entry)it.next();
            Control key = (Control)entry.getKey();
            Command value = (Command)entry.getValue();
            if(value == command)
            {
                controlsForCommand.add(key);
            }
        } while(true);
        return controlsForCommand;
    }

    public void setActive(boolean active)
    {
        this.active = active;
    }

    public boolean isActive()
    {
        return active;
    }

    public void addListener(InputProviderListener listener)
    {
        listeners.add(listener);
    }

    public void removeListener(InputProviderListener listener)
    {
        listeners.remove(listener);
    }

    public void bindCommand(Control control, Command command)
    {
        commands.put(control, command);
        if(commandState.get(command) == null)
        {
            commandState.put(command, new CommandState());
        }
    }

    public void clearCommand(Command command)
    {
        List controls = getControlsFor(command);
        for(int i = 0; i < controls.size(); i++)
        {
            unbindCommand((Control)controls.get(i));
        }

    }

    public void unbindCommand(Control control)
    {
        Command command = (Command)commands.remove(control);
        if(command != null && !commands.keySet().contains(command))
        {
            commandState.remove(command);
        }
    }

    private CommandState getState(Command command)
    {
        return (CommandState)commandState.get(command);
    }

    public boolean isCommandControlDown(Command command)
    {
        return getState(command).isDown();
    }

    public boolean isCommandControlPressed(Command command)
    {
        return getState(command).isPressed();
    }

    protected void firePressed(Command command)
    {
        getState(command).down = true;
        getState(command).pressed = true;
        if(!isActive())
        {
            return;
        }
        for(int i = 0; i < listeners.size(); i++)
        {
            ((InputProviderListener)listeners.get(i)).controlPressed(command);
        }

    }

    protected void fireReleased(Command command)
    {
        getState(command).down = false;
        if(!isActive())
        {
            return;
        }
        for(int i = 0; i < listeners.size(); i++)
        {
            ((InputProviderListener)listeners.get(i)).controlReleased(command);
        }

    }

}
