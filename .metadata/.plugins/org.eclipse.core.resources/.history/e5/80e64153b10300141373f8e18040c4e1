package tools;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Random;

import runtime.GamePanel;

public class AI extends Thing{
	
	public static final int left = 0, right = 1, up = 2, down = 3,stop = -1;
	protected int DIRIndexX,DIRIndexY,PathDIRX,PathDIRY;

	protected boolean followPath,followCharacter;
	protected Path path;
	protected Mask detectionMask;
	protected ArrayList<Character> characters;
	protected double NormDx,NormDy,MaxDx,MaxDy;
	
	private boolean inRoute;
	
	
	public AI(int Startx,int Starty,int xDirection,int yDirection){
		super(Startx,Starty);
		super.mask = new Mask(this, 0, 0, 20, 20);
		followPath = false;
		followCharacter = false;
		DIRIndexX =xDirection;
		DIRIndexY = yDirection;
		NormDx = 5;
		NormDy = 5;
		
	}
	
	public AI(Path path,double NormDx,double NormDy, double MaxDx,double MaxDy) {
		super(path.getPoint(0).x, path.getPoint(0).y);
		mask = new Mask(this, 0, 0, 20, 20);
		followPath = true;
		followCharacter = false;
		this.path = path;
		this.x = path.getPoint(0).x;
		this.y = path.getPoint(0).y;
		this.inRoute = true;
		this.NormDx = NormDx;
		this.NormDy = NormDy;
		this.MaxDx = MaxDx;
		this.MaxDy = MaxDy;
	}
	
//	public AI(Path path,Mask detectionMask,double NormDx,double NormDy, double MaxDx,double MaxDy){
//		super(path.getPoint().x, path.getPoint().y);
//		mask = new Mask(this, 0, 0, 20, 20);
//		this.detectionMask = detectionMask;
//		this.detectionMask.setThing(this);
//		followPath = true;
//		followCharacter = true;
//		this.path = path;
//		this.x = path.getPoint().x;
//		this.y = path.getPoint().y;
//		this.NormDx = NormDx;
//		this.NormDy = NormDy;
//		this.MaxDx = MaxDx;
//		this.MaxDy = MaxDy;
//	}
	
	public void blockCollision(int side){
		
		if(!followPath && !followCharacter){
			Random generate = new Random();
			DIRIndexX =  generate.nextInt(2);
			DIRIndexY =  generate.nextInt(2) + 2;
		}
	}
	
	protected void followingPath(){
		System.out.println("followPath()");
		
		if( path.isNextPoint() ){
			
			inRoute = moveTo( path.getNextPoint() );
			
			if(DIRIndexX==stop && DIRIndexY == stop){
				path.StepIndex();
				System.out.println(inRoute);
			}
		}else{
			inRoute = moveTo(path.getLastPoint() );
			
			if(DIRIndexX==stop && DIRIndexY == stop){
				System.out.println(inRoute);
				path.StepIndex();
			}
		}
	
	}
	
	private boolean moveTo(Point p){
		if(new Point(x,y) == p){
			DIRIndexX = stop;
			DIRIndexY = stop;
			return true;
		}
		else{
			if(Math.abs(this.x - p.x) <2*dx)
				dx = 1;
			if(Math.abs(this.y - p.y) <2*dy)
				dy = 1;
			
			if(this.x > p.x)
				DIRIndexX = left;
			else if(this.x < p.x)
				DIRIndexX = right;
			else
				DIRIndexX = stop;
			
			if(this.y> p.y)
				DIRIndexY = up;
			else if(this.y< p.y)
				DIRIndexY = down;
			else
				DIRIndexY= stop;
				
			return false;
		}
	}
	
	

	@Override
	public void Step() {
		
		
		if(followPath && !followCharacter)
			followingPath();
		
		switch(DIRIndexX){
		case AI.right:
			dx = NormDx;
			break;
		case AI.left:
			dx= -NormDy;
			break;
		case AI.stop:
			dx = 0;
			break;
		}
		switch(DIRIndexY){
		case AI.down:
			dy = NormDy;
			break;
		case AI.up:
			dy= -NormDy;
			break;
		case AI.stop:
			dy = 0;
			break;
		}
		
		

		x+=dx;
		y+=dy;
		
	}


	@Override
	public void render(Graphics g) {
		
		
	}

	@Override
	public void destroy() {
	gp.stuff.remove(this);	
		
	}
	
	public Mask getMask(){ return super.mask; }
	
	
	
	@Override
	public void addPanelRef(GamePanel gp) {
		super.addPanelRef(gp);
		characters = Character.findCharacters(gp);
	}

}
