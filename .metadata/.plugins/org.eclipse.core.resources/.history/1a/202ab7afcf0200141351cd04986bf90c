package org.newdawn.slick;

import java.io.*;
import java.util.HashMap;
import org.newdawn.slick.util.Log;
import org.newdawn.slick.util.ResourceLoader;

// Referenced classes of package org.newdawn.slick:
//            SpriteSheet, Image, SlickException, Color

public class PackedSpriteSheet
{
    private class Section
    {

        public int x;
        public int y;
        public int width;
        public int height;
        public int tilesx;
        public int tilesy;
        public String name;
        final PackedSpriteSheet this$0;

        public Section(BufferedReader reader)
            throws IOException
        {
            this$0 = PackedSpriteSheet.this;
            super();
            name = reader.readLine().trim();
            x = Integer.parseInt(reader.readLine().trim());
            y = Integer.parseInt(reader.readLine().trim());
            width = Integer.parseInt(reader.readLine().trim());
            height = Integer.parseInt(reader.readLine().trim());
            tilesx = Integer.parseInt(reader.readLine().trim());
            tilesy = Integer.parseInt(reader.readLine().trim());
            reader.readLine().trim();
            reader.readLine().trim();
            tilesx = Math.max(1, tilesx);
            tilesy = Math.max(1, tilesy);
        }
    }


    private Image image;
    private String basePath;
    private HashMap sections;
    private int filter;

    public PackedSpriteSheet(String def)
        throws SlickException
    {
        this(def, ((Color) (null)));
    }

    public PackedSpriteSheet(String def, Color trans)
        throws SlickException
    {
        sections = new HashMap();
        filter = 2;
        def = def.replace('\\', '/');
        basePath = def.substring(0, def.lastIndexOf("/") + 1);
        loadDefinition(def, trans);
    }

    public PackedSpriteSheet(String def, int filter)
        throws SlickException
    {
        this(def, filter, null);
    }

    public PackedSpriteSheet(String def, int filter, Color trans)
        throws SlickException
    {
        sections = new HashMap();
        this.filter = 2;
        this.filter = filter;
        def = def.replace('\\', '/');
        basePath = def.substring(0, def.lastIndexOf("/") + 1);
        loadDefinition(def, trans);
    }

    public Image getFullImage()
    {
        return image;
    }

    public Image getSprite(String name)
    {
        Section section = (Section)sections.get(name);
        if(section == null)
        {
            throw new RuntimeException((new StringBuilder()).append("Unknown sprite from packed sheet: ").append(name).toString());
        } else
        {
            return image.getSubImage(section.x, section.y, section.width, section.height);
        }
    }

    public SpriteSheet getSpriteSheet(String name)
    {
        Image image = getSprite(name);
        Section section = (Section)sections.get(name);
        return new SpriteSheet(image, section.width / section.tilesx, section.height / section.tilesy);
    }

    private void loadDefinition(String def, Color trans)
        throws SlickException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(ResourceLoader.getResourceAsStream(def)));
        try
        {
            image = new Image((new StringBuilder()).append(basePath).append(reader.readLine()).toString(), false, filter, trans);
            do
            {
                if(!reader.ready() || reader.readLine() == null)
                {
                    break;
                }
                Section sect = new Section(reader);
                sections.put(sect.name, sect);
            } while(reader.readLine() != null);
        }
        catch(Exception e)
        {
            Log.error(e);
            throw new SlickException("Failed to process definitions file - invalid format?", e);
        }
    }
}
