package org.newdawn.slick;

import java.awt.Canvas;
import javax.swing.SwingUtilities;
import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
import org.newdawn.slick.util.Log;

// Referenced classes of package org.newdawn.slick:
//            SlickException, Game, GameContainer, AppGameContainer, 
//            Input

public class CanvasGameContainer extends Canvas
{
    private class Container extends AppGameContainer
    {

        final CanvasGameContainer this$0;

        protected void updateFPS()
        {
            super.updateFPS();
        }

        protected boolean running()
        {
            return super.running() && isDisplayable();
        }

        public int getHeight()
        {
            return CanvasGameContainer.this.getHeight();
        }

        public int getWidth()
        {
            return CanvasGameContainer.this.getWidth();
        }

        public void checkDimensions()
        {
            if(width != CanvasGameContainer.this.getWidth() || height != CanvasGameContainer.this.getHeight())
            {
                try
                {
                    setDisplayMode(CanvasGameContainer.this.getWidth(), CanvasGameContainer.this.getHeight(), false);
                }
                catch(SlickException e)
                {
                    Log.error(e);
                }
            }
        }

        public Container(Game game, boolean shared)
            throws SlickException
        {
            this$0 = CanvasGameContainer.this;
            super(game, CanvasGameContainer.this.getWidth(), CanvasGameContainer.this.getHeight(), false);
            width = CanvasGameContainer.this.getWidth();
            height = CanvasGameContainer.this.getHeight();
            if(shared)
            {
                enableSharedContext();
            }
        }
    }


    protected Container container;
    protected Game game;

    public CanvasGameContainer(Game game)
        throws SlickException
    {
        this(game, false);
    }

    public CanvasGameContainer(Game game, boolean shared)
        throws SlickException
    {
        this.game = game;
        setIgnoreRepaint(true);
        requestFocus();
        setSize(500, 500);
        container = new Container(game, shared);
        container.setForceExit(false);
    }

    public void start()
        throws SlickException
    {
        SwingUtilities.invokeLater(new Runnable() {

            final CanvasGameContainer this$0;

            public void run()
            {
                try
                {
                    Input.disableControllers();
                    try
                    {
                        Display.setParent(CanvasGameContainer.this);
                    }
                    catch(LWJGLException e)
                    {
                        throw new SlickException("Failed to setParent of canvas", e);
                    }
                    container.setup();
                    scheduleUpdate();
                }
                catch(SlickException e)
                {
                    e.printStackTrace();
                    System.exit(0);
                }
            }

            
            {
                this$0 = CanvasGameContainer.this;
                super();
            }
        });
    }

    private void scheduleUpdate()
    {
        if(!isVisible())
        {
            return;
        } else
        {
            SwingUtilities.invokeLater(new Runnable() {

                final CanvasGameContainer this$0;

                public void run()
                {
                    try
                    {
                        container.gameLoop();
                    }
                    catch(SlickException e)
                    {
                        e.printStackTrace();
                    }
                    container.checkDimensions();
                    scheduleUpdate();
                }

            
            {
                this$0 = CanvasGameContainer.this;
                super();
            }
            });
            return;
        }
    }

    public void dispose()
    {
    }

    public GameContainer getContainer()
    {
        return container;
    }

}
