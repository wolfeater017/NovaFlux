package org.newdawn.slick;

import java.io.IOException;
import java.util.HashMap;
import javax.jnlp.ServiceManager;
import org.newdawn.slick.muffin.FileMuffin;
import org.newdawn.slick.muffin.Muffin;
import org.newdawn.slick.muffin.WebstartMuffin;
import org.newdawn.slick.util.Log;

// Referenced classes of package org.newdawn.slick:
//            SlickException

public class SavedState
{

    private String fileName;
    private Muffin muffin;
    private HashMap numericData;
    private HashMap stringData;

    public SavedState(String fileName)
        throws SlickException
    {
        numericData = new HashMap();
        stringData = new HashMap();
        this.fileName = fileName;
        if(isWebstartAvailable())
        {
            muffin = new WebstartMuffin();
        } else
        {
            muffin = new FileMuffin();
        }
        try
        {
            load();
        }
        catch(IOException e)
        {
            throw new SlickException("Failed to load state on startup", e);
        }
    }

    public double getNumber(String nameOfField)
    {
        return getNumber(nameOfField, 0.0D);
    }

    public double getNumber(String nameOfField, double defaultValue)
    {
        Double value = (Double)numericData.get(nameOfField);
        if(value == null)
        {
            return defaultValue;
        } else
        {
            return value.doubleValue();
        }
    }

    public void setNumber(String nameOfField, double value)
    {
        numericData.put(nameOfField, new Double(value));
    }

    public String getString(String nameOfField)
    {
        return getString(nameOfField, null);
    }

    public String getString(String nameOfField, String defaultValue)
    {
        String value = (String)stringData.get(nameOfField);
        if(value == null)
        {
            return defaultValue;
        } else
        {
            return value;
        }
    }

    public void setString(String nameOfField, String value)
    {
        stringData.put(nameOfField, value);
    }

    public void save()
        throws IOException
    {
        muffin.saveFile(numericData, (new StringBuilder()).append(fileName).append("_Number").toString());
        muffin.saveFile(stringData, (new StringBuilder()).append(fileName).append("_String").toString());
    }

    public void load()
        throws IOException
    {
        numericData = muffin.loadFile((new StringBuilder()).append(fileName).append("_Number").toString());
        stringData = muffin.loadFile((new StringBuilder()).append(fileName).append("_String").toString());
    }

    public void clear()
    {
        numericData.clear();
        stringData.clear();
    }

    private boolean isWebstartAvailable()
    {
        try
        {
            Class.forName("javax.jnlp.ServiceManager");
            ServiceManager.lookup("javax.jnlp.PersistenceService");
            Log.info("Webstart detected using Muffins");
        }
        catch(Exception e)
        {
            Log.info("Using Local File System");
            return false;
        }
        return true;
    }
}
