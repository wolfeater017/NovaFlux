package tools;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;

import runtime.GamePanel;

public class AI extends Thing{
	
	public static final int left = 0, right = 1, up = 2, down = 3;
	public static int DIRIndex;

	protected boolean followPath,followCharacter;
	protected Path path;
	protected Mask detectionMask;
	protected ArrayList<Character> characters;
	protected double NormDx,NormDy,MaxDx,MaxDy;
	
	
	public AI(int Startx,int Starty,int Direction){
		super(Startx,Starty);
		super.mask = new Mask(this, 0, 0, 20, 20);
		followPath = false;
		followCharacter = false;
		DIRIndex = Direction;
		NormDx = 5;
		NormDy = 5;
		
	}
	
	public AI(Path path,double NormDx,double NormDy, double MaxDx,double MaxDy) {
		super(path.getPoint().x, path.getPoint().y);
		mask = new Mask(this, 0, 0, 20, 20);
		followPath = true;
		followCharacter = false;
		this.path = path;
		this.x = path.getPoint().x;
		this.y = path.getPoint().y;
		this.NormDx = NormDx;
		this.NormDy = NormDy;
		this.MaxDx = MaxDx;
		this.MaxDy = MaxDy;
	}
	
	public AI(Path path,Mask detectionMask,double NormDx,double NormDy, double MaxDx,double MaxDy){
		super(path.getPoint().x, path.getPoint().y);
		mask = new Mask(this, 0, 0, 20, 20);
		this.detectionMask = detectionMask;
		this.detectionMask.setThing(this);
		followPath = true;
		followCharacter = true;
		this.path = path;
		this.x = path.getPoint().x;
		this.y = path.getPoint().y;
		this.NormDx = NormDx;
		this.NormDy = NormDy;
		this.MaxDx = MaxDx;
		this.MaxDy = MaxDy;
	}
	
	public void blockCollision(int side){
		
		if(!followPath && !followCharacter){
			boolean directionFound = false;
			int safety = 0;
			for(int bbb = DIRIndex; bbb<4; bbb++){
				safety++;
				if(bbb!=side){
					DIRIndex = bbb;
					directionFound = true;
				}
				if(safety<=8 && !directionFound && bbb ==3)
					bbb=0;
			}
		}
	}
	
	@Override
	public void addPanelRef(GamePanel gp) {
		super.addPanelRef(gp);
		characters = Character.findCharacters(gp);
	}

	@Override
	public void Step() {
		
		switch(DIRIndex){
		case AI.right:
			dx = NormDx;
			System.out.println(dx);
			break;
		case AI.left:
			dx = -NormDy;
			break;
		case AI.down:
			dy = NormDy;
			break;
		case AI.up:
			dy = -NormDy;
			break;
		}
		
		x+=dx;
		y+=dy;
		
	}


	@Override
	public void render(Graphics g) {
		
		
	}

	@Override
	public void destroy() {
	gp.stuff.remove(this);	
		
	}
	
	public Mask getMask(){ return super.mask; }

}
