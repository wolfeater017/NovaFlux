package org.newdawn.slick;

import java.applet.Applet;
import org.lwjgl.BufferUtils;
import org.lwjgl.LWJGLException;
import org.lwjgl.input.Cursor;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.*;
import org.newdawn.slick.opengl.CursorLoader;
import org.newdawn.slick.opengl.ImageData;
import org.newdawn.slick.util.Log;

// Referenced classes of package org.newdawn.slick:
//            GameContainer, SlickException, Image, AppletGameContainer, 
//            Input, Game, Graphics

public class height extends GameContainer
{

    final AppletGameContainer this$0;

    public void initApplet()
        throws SlickException
    {
        initSystem();
        enterOrtho();
        try
        {
            getInput().initControllers();
        }
        catch(SlickException e)
        {
            Log.info("Controllers not available");
        }
        catch(Throwable e)
        {
            Log.info("Controllers not available");
        }
        game.init(this);
        getDelta();
    }

    public boolean isRunning()
    {
        return running;
    }

    public void stopApplet()
    {
        running = false;
    }

    public int getScreenHeight()
    {
        return 0;
    }

    public int getScreenWidth()
    {
        return 0;
    }

    public boolean supportsAlphaInBackBuffer()
    {
        return alphaSupport;
    }

    public boolean hasFocus()
    {
        return true;
    }

    public Applet getApplet()
    {
        return AppletGameContainer.this;
    }

    public void setIcon(String s)
        throws SlickException
    {
    }

    public void setMouseGrabbed(boolean grabbed)
    {
        Mouse.setGrabbed(grabbed);
    }

    public boolean isMouseGrabbed()
    {
        return Mouse.isGrabbed();
    }

    public void setMouseCursor(String ref, int hotSpotX, int hotSpotY)
        throws SlickException
    {
        try
        {
            Cursor cursor = CursorLoader.get().getCursor(ref, hotSpotX, hotSpotY);
            Mouse.setNativeCursor(cursor);
        }
        catch(Throwable e)
        {
            Log.error("Failed to load and apply cursor.", e);
            throw new SlickException("Failed to set mouse cursor", e);
        }
    }

    private int get2Fold(int fold)
    {
        int ret;
        for(ret = 2; ret < fold; ret *= 2) { }
        return ret;
    }

    public void setMouseCursor(Image image, int hotSpotX, int hotSpotY)
        throws SlickException
    {
        try
        {
            Image temp = new Image(get2Fold(image.getWidth()), get2Fold(image.getHeight()));
            Graphics g = temp.getGraphics();
            java.nio.ByteBuffer buffer = BufferUtils.createByteBuffer(temp.getWidth() * temp.getHeight() * 4);
            g.drawImage(image.getFlippedCopy(false, true), 0.0F, 0.0F);
            g.flush();
            g.getArea(0, 0, temp.getWidth(), temp.getHeight(), buffer);
            Cursor cursor = CursorLoader.get().getCursor(buffer, hotSpotX, hotSpotY, temp.getWidth(), temp.getHeight());
            Mouse.setNativeCursor(cursor);
        }
        catch(Throwable e)
        {
            Log.error("Failed to load and apply cursor.", e);
            throw new SlickException("Failed to set mouse cursor", e);
        }
    }

    public void setIcons(String as[])
        throws SlickException
    {
    }

    public void setMouseCursor(ImageData data, int hotSpotX, int hotSpotY)
        throws SlickException
    {
        try
        {
            Cursor cursor = CursorLoader.get().getCursor(data, hotSpotX, hotSpotY);
            Mouse.setNativeCursor(cursor);
        }
        catch(Throwable e)
        {
            Log.error("Failed to load and apply cursor.", e);
            throw new SlickException("Failed to set mouse cursor", e);
        }
    }

    public void setMouseCursor(Cursor cursor, int hotSpotX, int hotSpotY)
        throws SlickException
    {
        try
        {
            Mouse.setNativeCursor(cursor);
        }
        catch(Throwable e)
        {
            Log.error("Failed to load and apply cursor.", e);
            throw new SlickException("Failed to set mouse cursor", e);
        }
    }

    public void setDefaultMouseCursor()
    {
    }

    public boolean isFullscreen()
    {
        return Display.isFullscreen();
    }

    public void setFullscreen(boolean fullscreen)
        throws SlickException
    {
        if(fullscreen == isFullscreen())
        {
            return;
        }
        try
        {
            if(fullscreen)
            {
                int screenWidth = Display.getDisplayMode().getWidth();
                int screenHeight = Display.getDisplayMode().getHeight();
                float gameAspectRatio = (float)width / (float)height;
                float screenAspectRatio = (float)screenWidth / (float)screenHeight;
                int newWidth;
                int newHeight;
                if(gameAspectRatio >= screenAspectRatio)
                {
                    newWidth = screenWidth;
                    newHeight = (int)((float)height / ((float)width / (float)screenWidth));
                } else
                {
                    newWidth = (int)((float)width / ((float)height / (float)screenHeight));
                    newHeight = screenHeight;
                }
                int xoffset = (screenWidth - newWidth) / 2;
                int yoffset = (screenHeight - newHeight) / 2;
                GL11.glViewport(xoffset, yoffset, newWidth, newHeight);
                enterOrtho();
                getInput().setOffset(((float)(-xoffset) * (float)width) / (float)newWidth, ((float)(-yoffset) * (float)height) / (float)newHeight);
                getInput().setScale((float)width / (float)newWidth, (float)height / (float)newHeight);
                width = screenWidth;
                height = screenHeight;
                Display.setFullscreen(true);
            } else
            {
                getInput().setOffset(0.0F, 0.0F);
                getInput().setScale(1.0F, 1.0F);
                width = getWidth();
                height = getHeight();
                GL11.glViewport(0, 0, width, height);
                enterOrtho();
                Display.setFullscreen(false);
            }
        }
        catch(LWJGLException e)
        {
            Log.error(e);
        }
    }

    public void runloop()
        throws Exception
    {
        while(running) 
        {
            int delta = getDelta();
            updateAndRender(delta);
            updateFPS();
            Display.update();
        }
        Display.destroy();
    }

    public (Game game)
    {
        this$0 = AppletGameContainer.this;
        super(game);
        width = getWidth();
        height = getHeight();
    }
}
