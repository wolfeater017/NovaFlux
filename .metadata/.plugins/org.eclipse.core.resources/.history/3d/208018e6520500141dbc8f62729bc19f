package mapcreator;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import tools.Button;

public class Manipulator extends section{
	
	public static final int x = 0,y = 35, width = CreatorApp.width*4/5, height = CreatorApp.height-20;
	public static final int GridSpacing = 10;
	private boolean GridOn = true;
	private int GRIDCONSTANT = 32;
	private Panel p;
	
	public static ArrayList<TempThing> things = new ArrayList<TempThing>();
	
	private Button save,open;
	
	public Manipulator(Panel p){
		this.p = p;
		save = new Save();
		open = new Open();
	}
	
	@Override
	public void Step(){
		
	}
	
	
	private void renderMap(Graphics g){
		if(GridOn){
			g.setColor(Color.black);
			for( int bbb = 0; bbb<=width/GridSpacing; bbb++)
				g.drawLine( (bbb*GridSpacing) + x, y , (bbb*GridSpacing) + x, y + height);
			for( int bbb = 0; bbb<= height/GridSpacing; bbb++)
				g.drawLine( (x), (bbb*GridSpacing) + y ,x + width,(bbb*GridSpacing) + y );
			for(int bbb =0; bbb<things.size(); bbb++)
				things.get(bbb).render(g);
		}
		
		
	}
	@Override
	public void render(Graphics g){
		g.setColor(Color.white);
		g.fillRect(x,y, width, height);
		
		save.render(g);
		open.render(g);
		
		renderMap(g);
	}
	
	
	public void GridClicked(MouseEvent e){
		if(p.IDSelected!=null){
			int x = (e.getX() - Manipulator.x)/Manipulator.GridSpacing;
			int y = (e.getY() - Manipulator.y)/Manipulator.GridSpacing;
			for(  int bbb = 0; bbb<things.size(); bbb++)
				if(things.get(bbb).x == x && things.get(bbb).y == y-3)//object already exists here
					things.remove(bbb);//remove sed object
			
			this.things.add( new TempThing(p.IDSelected, x, y,true,null) );
		}
		
		
		
	}
	
	private class Save extends Button{

		public Save() {
			super("Save", new Rectangle(5, 5, 56, 30), 2);
			disabled = Color.gray;
			normal = Color.BLACK;
		}
		
		
		@Override
		public void Clicked() {
			super.Clicked();
			FileManager fm = new FileManager(p.ca);
			fm.SaveFile();
		}
		
		@Override
		public void render(Graphics g) {
			
			super.render(g);
		}
		
	}
	
	private class Open extends Button{

		public Open() {
			super("Open", new Rectangle(63, 5, 56, 30), 2);
			disabled = Color.gray;
			normal = Color.BLACK;
		}
		
		
		@Override
		public void Clicked() {
			super.Clicked();
			FileManager fm = new FileManager(p.ca);
			fm.LoadFile();
		}
		
		@Override
		public void render(Graphics g) {
			
			super.render(g);
		}
		
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		save.MouseClicked(e);
		open.MouseClicked(e);
		
		if( e.getX() >= x && e.getX()<= x + width ){
			if(e.getY()> y + 35 && e.getY()<= y + height){
				GridClicked(e);
				
			}
		}
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		save.MouseMoved(e);
		open.MouseMoved(e);
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

}
