package org.lwjgl;

import java.io.File;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.*;
import org.lwjgl.input.Mouse;

// Referenced classes of package org.lwjgl:
//            LinuxSysImplementation, WindowsSysImplementation, MacOSXSysImplementation, LWJGLUtil, 
//            SysImplementation

public final class Sys
{

    private static final String JNI_LIBRARY_NAME = "lwjgl";
    private static final String VERSION = "2.9.1";
    private static final String POSTFIX64BIT = "64";
    private static final SysImplementation implementation;
    private static final boolean is64Bit;

    private static void doLoadLibrary(String lib_name)
    {
        AccessController.doPrivileged(new PrivilegedAction(lib_name) {

            final String val$lib_name;

            public Object run()
            {
                String library_path = System.getProperty("org.lwjgl.librarypath");
                if(library_path != null)
                {
                    System.load((new StringBuilder()).append(library_path).append(File.separator).append(System.mapLibraryName(lib_name)).toString());
                } else
                {
                    System.loadLibrary(lib_name);
                }
                return null;
            }

            
            {
                lib_name = s;
                super();
            }
        });
    }

    private static void loadLibrary(String lib_name)
    {
        String osArch = System.getProperty("os.arch");
        boolean is64bit = "amd64".equals(osArch) || "x86_64".equals(osArch);
        if(is64bit)
        {
            try
            {
                doLoadLibrary((new StringBuilder()).append(lib_name).append("64").toString());
                return;
            }
            catch(UnsatisfiedLinkError e)
            {
                LWJGLUtil.log((new StringBuilder()).append("Failed to load 64 bit library: ").append(e.getMessage()).toString());
            }
        }
        try
        {
            doLoadLibrary(lib_name);
        }
        catch(UnsatisfiedLinkError e)
        {
            if(implementation.has64Bit())
            {
                try
                {
                    doLoadLibrary((new StringBuilder()).append(lib_name).append("64").toString());
                    return;
                }
                catch(UnsatisfiedLinkError e2)
                {
                    LWJGLUtil.log((new StringBuilder()).append("Failed to load 64 bit library: ").append(e2.getMessage()).toString());
                }
            }
            throw e;
        }
    }

    private static SysImplementation createImplementation()
    {
        switch(LWJGLUtil.getPlatform())
        {
        case 1: // '\001'
            return new LinuxSysImplementation();

        case 3: // '\003'
            return new WindowsSysImplementation();

        case 2: // '\002'
            return new MacOSXSysImplementation();
        }
        throw new IllegalStateException("Unsupported platform");
    }

    private Sys()
    {
    }

    public static String getVersion()
    {
        return "2.9.1";
    }

    public static void initialize()
    {
    }

    public static boolean is64Bit()
    {
        return is64Bit;
    }

    public static long getTimerResolution()
    {
        return implementation.getTimerResolution();
    }

    public static long getTime()
    {
        return implementation.getTime() & 0x7fffffffffffffffL;
    }

    public static void alert(String title, String message)
    {
        boolean grabbed = Mouse.isGrabbed();
        if(grabbed)
        {
            Mouse.setGrabbed(false);
        }
        if(title == null)
        {
            title = "";
        }
        if(message == null)
        {
            message = "";
        }
        implementation.alert(title, message);
        if(grabbed)
        {
            Mouse.setGrabbed(true);
        }
    }

    public static boolean openURL(String url)
    {
        Object basicService;
        Method showDocumentMethod;
        Class serviceManagerClass = Class.forName("javax.jnlp.ServiceManager");
        Method lookupMethod = (Method)AccessController.doPrivileged(new PrivilegedExceptionAction(serviceManagerClass) {

            final Class val$serviceManagerClass;

            public Method run()
                throws Exception
            {
                return serviceManagerClass.getMethod("lookup", new Class[] {
                    java/lang/String
                });
            }

            public volatile Object run()
                throws Exception
            {
                return run();
            }

            
            {
                serviceManagerClass = class1;
                super();
            }
        });
        basicService = lookupMethod.invoke(serviceManagerClass, new Object[] {
            "javax.jnlp.BasicService"
        });
        Class basicServiceClass = Class.forName("javax.jnlp.BasicService");
        showDocumentMethod = (Method)AccessController.doPrivileged(new PrivilegedExceptionAction(basicServiceClass) {

            final Class val$basicServiceClass;

            public Method run()
                throws Exception
            {
                return basicServiceClass.getMethod("showDocument", new Class[] {
                    java/net/URL
                });
            }

            public volatile Object run()
                throws Exception
            {
                return run();
            }

            
            {
                basicServiceClass = class1;
                super();
            }
        });
        Boolean ret = (Boolean)showDocumentMethod.invoke(basicService, new Object[] {
            new URL(url)
        });
        return ret.booleanValue();
        MalformedURLException e;
        e;
        e.printStackTrace(System.err);
        return false;
        Exception ue;
        ue;
        return implementation.openURL(url);
    }

    public static String getClipboard()
    {
        return implementation.getClipboard();
    }

    static 
    {
        implementation = createImplementation();
        loadLibrary("lwjgl");
        is64Bit = implementation.getPointerSize() == 8;
        int native_jni_version = implementation.getJNIVersion();
        int required_version = implementation.getRequiredJNIVersion();
        if(native_jni_version != required_version)
        {
            throw new LinkageError((new StringBuilder()).append("Version mismatch: jar version is '").append(required_version).append("', native library version is '").append(native_jni_version).append("'").toString());
        } else
        {
            implementation.setDebug(LWJGLUtil.DEBUG);
        }
    }
}
