package tools;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Random;

import runtime.GamePanel;

public class AI extends Thing{
	
	public static final int left = 0, right = 1, up = 2, down = 3;
	protected int DIRIndexX,DIRIndexY,PathDIRX,PathDIRY;

	protected boolean followPath,followCharacter;
	protected Path path;
	protected Mask detectionMask;
	protected ArrayList<Character> characters;
	protected double NormDx,NormDy,MaxDx,MaxDy;
	
	
	public AI(int Startx,int Starty,int xDirection,int yDirection){
		super(Startx,Starty);
		super.mask = new Mask(this, 0, 0, 20, 20);
		followPath = false;
		followCharacter = false;
		DIRIndexX =xDirection;
		DIRIndexY = yDirection;
		NormDx = 5;
		NormDy = 5;
		
	}
	
	public AI(Path path,double NormDx,double NormDy, double MaxDx,double MaxDy) {
		super(path.getPoint().x, path.getPoint().y);
		mask = new Mask(this, 0, 0, 20, 20);
		followPath = true;
		followCharacter = false;
		this.path = path;
		this.x = path.getPoint().x;
		this.y = path.getPoint().y;
		this.NormDx = NormDx;
		this.NormDy = NormDy;
		this.MaxDx = MaxDx;
		this.MaxDy = MaxDy;
	}
	
	public AI(Path path,Mask detectionMask,double NormDx,double NormDy, double MaxDx,double MaxDy){
		super(path.getPoint().x, path.getPoint().y);
		mask = new Mask(this, 0, 0, 20, 20);
		this.detectionMask = detectionMask;
		this.detectionMask.setThing(this);
		followPath = true;
		followCharacter = true;
		this.path = path;
		this.x = path.getPoint().x;
		this.y = path.getPoint().y;
		this.NormDx = NormDx;
		this.NormDy = NormDy;
		this.MaxDx = MaxDx;
		this.MaxDy = MaxDy;
	}
	
	public void blockCollision(int side){
		
		if(!followPath && !followCharacter){
			Random generate = new Random();
			DIRIndexX =  generate.nextInt(2);
			DIRIndexY =  generate.nextInt(2) + 2;
		}
	}
	
	protected void followingPath(){
		
		if(path.movingForward()){
			if(path.getNextPoint() !=null){
				
				PathDIRX = path.getNextDIRIndexX();
				PathDIRY = path.getNextDIRIndexY();
				boolean XReachedNextPoint = false;
				
				if(PathDIRX == left && path.getNextPoint().x - x < 0){
					DIRIndexX = left;
				}
				else{
					XReachedNextPoint = true;
				}
					
				if(PathDIRX == right && path.getNextPoint().x - x > 0){//going right + have not reached next point
						DIRIndexX = right;	
				}
				else{//going right and have reached next point
					XReachedNextPoint = true;
				}
				
				if(PathDIRY == down && path.getNextPoint().y - y > 0){
					DIRIndexY = down;
				}
				else{
					if(XReachedNextPoint){
						path.ForwardStep();
					}
				}
					
				if(PathDIRY == right && path.getNextPoint().y - y < 0){//going right + have not reached next point
						DIRIndexY = up;	
				}
				else{//going right and have reached next point
					if(XReachedNextPoint){
						path.ForwardStep();
					}
				}
			}
		}
		else if(!path.movingForward()){
			if(path.getLastPoint() !=null){
				
				PathDIRX = path.getLastDIRIndexX();
				PathDIRY = path.getLastDIRIndexY();
				boolean XReachedLastPoint = false;
				
				if(PathDIRX == left && path.getLastPoint().x - x < 0){
					DIRIndexX = left;
				}
				else{
					XReachedLastPoint = true;
				}
					
				if(PathDIRX == right && path.getLastPoint().x - x > 0){//going right + have not reached next point
						DIRIndexX = right;	
				}
				else{//going right and have reached next point
			
					XReachedLastPoint = true;
				}
				
				if(PathDIRY == down && path.getLastPoint().y - y > 0){
					DIRIndexY = down;
				}
				else{
					if(XReachedLastPoint)
						path.BackwardsStep();
				}
					
				if(PathDIRY == right && path.getLastPoint().y - y < 0){//going right + have not reached next point
						DIRIndexY = up;	
				}
				else{//going right and have reached next point
					if(XReachedLastPoint)
						path.BackwardsStep();
				}
			}
		}
	}
	
	@Override
	public void addPanelRef(GamePanel gp) {
		super.addPanelRef(gp);
		characters = Character.findCharacters(gp);
	}

	@Override
	public void Step() {
		switch(DIRIndexX){
		case AI.right:
			dx = NormDx;
			break;
		case AI.left:
			dx = -NormDy;
			break;
		}
		switch(DIRIndexY){
		case AI.down:
			dy = NormDy;
			break;
		case AI.up:
			dy = -NormDy;
			break;
		}
		
		if(followPath && !followCharacter)
			followingPath();

		x+=dx;
		y+=dy;
		
	}


	@Override
	public void render(Graphics g) {
		
		
	}

	@Override
	public void destroy() {
	gp.stuff.remove(this);	
		
	}
	
	public Mask getMask(){ return super.mask; }

}
